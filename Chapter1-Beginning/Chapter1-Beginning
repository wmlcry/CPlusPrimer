# 第一章 开始
## 1.1 编写一个简单的C++程序
``` c++
int main()
{
    return 0;
}
```
一个函数的定义包含四部分: 返回类型、函数名、一个括号包围的形参列表以及函数体。

### 1.1.1 编译、运行程序

在linux系统下编译以上名为prog1.cpp的程序命令如下:
``` bash
$ g++ -o prog1 prog1.cpp -Wall -std=c++11
```

$是系统提示符。-o prog1是编译器参数，指定了可执行文件的文件名。-Wall是打开对警告，-std=c++11是打开对C++11的支持。

在unix/linux系统中，运行可执行文件，需要用一个"."后跟一个斜线来指出可执行文件位于当前目录
``` bash
$ ./prog1
```

在unix/linux系统中，查看程序执行后的返回值，命令如下：
``` bash
$ echo $?
```


### 1.1节练习
练习1.1:查阅你使用的编译器的文档，确定它所使用的文件命名约定。编译并运行第2页的main程序。

![](images/2023-01-08-01-07-26.png)

练习1.2:改写程序，让它返回-1。返回值-1通常被当作程序错误的标识。重新编译并运行你的程序，观察你的系统如何处理main返回的错误标识。
``` c++
int main()
{
    return -1;
}
```
![](images/2023-01-08-01-12-59.png)

## 1.2 初识输入输出
C++语言并未定义任何输入输出（IO）语句，取而代之，包含了一个全面的标准库（standard library）来提供IO机制（以及很多其他设施）。

> 我理解的是说语言本身并没有提供输入输出，而是通过库来实现的。比如用cin和cout的时候要包含一下iostream这个库。对比一下Python2里print是一个语句，Python3里print()是一个函数，不过都不用导库，直接就能用。

iostream库包含两个基础类型istream和ostream，分别表示输入流和输出流。一个流就是一个字符序列，是从IO设备读出或写入IO设备的。术语“流”（stream）想要表达的是，随着时间的推移，字符是顺序生成或消耗的。

### 标准输入输出对象
标准库定义了4个IO对象
- `cin`的istream类型对象，被称为标准输入
- `cout`的ostream类型对象，被称为标准输出
- `cerr`的ostream类型对象，用来输出警告和错误信息，被称为标准错误
- `clog`的ostream类型对象，用来输出程序运行时的一般信息

### 一个使用IO库的程序

``` c++
#include <iostream>

int main()
{
    std::cout << "Enter two numbers: " << std::endl;
    int v1 = 0;
    int v2 = 0;
    std::cin >> v1 >> v2;
    std::cout << "The sum of " << v1 << " and " << v2 << " is " << v1 + v2 << std::endl;
    return 0;
}
```
**程序执行结果如下图:**

![](images/2023-01-08-01-27-17.png)

``` c++
#include <iostream>
```
告诉编译器使用iostream库。尖括号中的名字（iostream）指出了一个头文件（header）。

**注意事项:**
- 每个使用标准库设施的程序都必须包含相关的头文件
- `#include`指令和头文件的名字必须写在同一行中
- 通常情况下，`#include`指令必须出现在所有函数之外
- 一般将一个程序的所有`#include`指令都放在源文件的开始位置

### 向流写入数据
``` c++
std::cout << "Enter two numbers: " << std::endl;
```
这条语句中的表达式使用了输出运算符（<<）在标准输出上打印消息。

<<运算符接受两个运算对象：左侧的运算对象必须是一个ostream对象，右侧的运算对象是要打印的值。

第一个输出运算符给用户打印一条消息。这个消息是一个字符串字面值常量（string literal），是用一对双引号包围的字符序列。在双引号之间的文本被打印到标准输出。

第二个运算符打印endl，这是一个被称为操纵符（manipulator）的特殊值。写入endl的效果是结束当前行，并将与设备关联的缓冲区（buffer）中的内容刷到设备中。缓冲刷新操作可以保证到目前为止程序所产生的所有输出都真正写入输出流中，而不是仅停留在内存中等待写入流。

> 程序员常常在调试时添加打印语句。这类语句应该保证“一直”刷新流。否则，如果程序崩溃，输出可能还留在缓冲区中，从而导致关于程序崩溃位置的错误推断。

### 使用标准库中的名字

前缀std：：指出名字cout和endl是定义在名为std的命名空间（namespace）中的。

命名空间可以帮助我们避免不经意的名字定义冲突，以及使用库中相同名字导致的冲突。标准库定义的所有名字都在命名空间std中。

**缺点是：**

当使用标准库中的一个名字时，必须显式说明我们想使用来自命名空间std中的名字。例如需要写出std::cout，通过作用域运算符(::)来指出我们想要使用定义在命名空间std中的名字cout。

### 从流中读取数据
定义了两个int类型的变量来保存输入，并将它们初始化为0。
``` c++
int v1 = 0;
int v2 = 0;
```
int是一种**内置类型**，用来表示整数。

**初始化**一个变量，就是在变量创建的同时为它赋予一个值。

``` c++
std::cin >> v1 >> v2;
```

**输入运算符`>>`** 与输出运算符类似，接受一个istream作为其左侧运算对象，接收一个对象作为其右侧运算对象。

它从给定的istream读入数据，并存入给定对象中。与输出运算符类似，输入运算符返回其左侧运算对象作为其计算结果。

### 完成程序
打印计算结果：
``` c++
std::cout << "The sum of " << v1 << " and " << v2 << " is " << v1 + v2 << std::endl;
```

### 1.2节练习

练习1.3: 编写程序，在标准输出上打印Hello, World
``` c++
#include <iostream>
int main()
{
    std::cout << "Hello, World" << std::endl;
    return 0;
}
```

练习1.4: 我们的程序使用加法运算符`+` 来将两个数相加。编写程序使用乘法运算符`*` ，来打印两个数的积。

``` c++
#include <iostream>

int main()
{
    std::cout << "Enter two numbers: " << std::endl;
    int v1 = 0;
    int v2 = 0;
    std::cin >> v1 >> v2;
    std::cout << "The sum of " << v1 << " and " << v2 << " is " << v1 * v2 << std::endl;
    return 0;
}
```

练习1.5: 我们将所有输出操作放在一条很长的语句中。重写程序，将每个运算对象的打印操作放在一条独立的语句中。

``` c++
#include <iostream>

int main()
{
    std::cout << "Enter two numbers: ";
    std::cout << std::endl;
    int v1 = 0;
    int v2 = 0;
    std::cin >> v1 >> v2;
    std::cout << "The sum of ";
    std::cout << v1; 
    std::cout << " and ";
    std::cout << v2; 
    std::cout << " is ";
    std::cout << v1 * v2;
    std::cout << std::endl;
    return 0;
}
```

练习1.6: 解释下面的程序片段是否合法
``` c++
std::cout << "The sum of " << v1;
          << " and " << v2;
          << " is " << v1 + v2 << std::endl;
```
如果程序上合法的，它输出什么？如果程序不合法，原因何在？应该如何修正？

这段代码不合法。前两行末尾有分号，表示语句已经结束。第2、3行为两条新语句。在这两条新语句"<<"前缺少了输出流，应该加上"std::cout"，即可得到正确的程序，如下：

``` c++
std::cout << "The sum of " << v1;
std::cout << " and " << v2;
std::cout << " is " << v1 + v2 << std::endl;
```

## 1.3 注释简介
c++中有两种注释：
- 单行注释，以双斜线`// 注释` 开始，以换行符结束。
- 界定符对注释，继承自c语言的两个界定符`/* 注释 */`，以`/*` 开始，以`*/`结尾，可以包含除`*/`之外的惹你内容，包括换行符。

程序中通常同时包含这两种形式的注释。注释界定符对通常用于**多行解释**，而双斜线注释常用于**半行和单行附注**。
``` c++
#include <iostream>
/*
* 简单主函数
* 读取两个数，求他们的和
*/
int main()
{
    // 提示用户输入两个数
    std::cout << "Enter two numbers: " << std::endl;
    int v1 = 0; // 保存读入的输入数据的变量
    int v2 = 0;
    std::cin >> v1 >> v2; // 读取输入数据
    std::cout << "The sum of " << v1 << " and " << v2 << " is " << v1 + v2 << std::endl;
    return 0;
}
```
值得注意的是：**注释界定符对不能嵌套**

一个注释不能嵌套在另一个注释之内。编译器对这类问题所给出的错误信息可能是难以理解、令人迷惑的。

例如：

``` c++
/*
* 注释对/* */不能嵌套。
* “不能嵌套”几个字会被认为是源码，
* 像剩余程序一样处理
*/
int main()
{
    return 0;
}
```
![](images/2023-01-08-13-52-48.png)

### 1.3节练习
练习17:编译一个包含不正确的嵌套注释的程序，观察编译器返回的错误信息。

可见上面程序执行结果

练习1.8:指出下列哪些输出语句是合法的（如果有的话：）
``` c++
std::cout << "/*";
std::cout << "*/";
std::cout << /* "*/" */;
std::cout << /* "*/" /* "/*" */;
```
预测编译这些语句会产生什么样的结果，实际编译这些语句来验证你的答案（编写一个小程序，每次将上述一条语句作为其主体），改正每个编译错误。

``` c++
std::cout << "/*";
```
这条语句没有问题，编译结果：
![](images/2023-01-08-14-00-22.png)

``` c++
std::cout << "*/";
```
这条语句没有问题，编译结果：

![](images/2023-01-08-14-01-27.png)

``` c++
std::cout << /* "*/" */;
```
这条语句编译报错，编译结果：

![](images/2023-01-08-14-02-40.png)

第一个双引号被注释掉了，因此<<运算符后真正被编译的内容是" */，编译器认为这是一个不完整的字符串，缺少结束的双引号。在分号前补上一个双引号，这条语句就变为正确的了。

``` c++
std::cout << /* "*/" /* "/*" */;
```

这条语句是正确的。第一个双引号被注释掉了，第四个双引号也被注释掉了，第二个双引号和第三个双引号之间的“/* ”被认为是字符串的文字内容，编译结果。

![](images/2023-01-08-14-06-58.png)

## 1.4 控制流

### while语句

while语句反复执行一段代码，直到给定条件为假为止。

``` c++
// prog4.cpp - 求1到10这10个数之和
#include <iostream>

int main()
{
    int sum = 0;
    int val = 1;
    // 只要val的值小于10，while循环就会持续运行
    while (val <= 10)
    {
        sum += val; // 将sum+val赋给sum
        ++val;      // 将val加1
    }
    std::cout << "Sum of 1 to 10 inclusive is " << sum << std::endl;
    return 0;   
}
```
![](images/2023-01-08-14-17-01.png)

这个程序的新内容是while语句。while语句的形式为
``` c++
while(condition)
    statement；
```

while语句的执行过程是交替地检测condition条件和执行关联的语句statement，直至condition为假时停止。所谓条件（condition）就是一个产生真或假的结果的表达式。只要condition为真，statement就会被执行。当执行完statement，会再次检测condition。如果condition仍为真，statement再次被执行。while语句持续地交替检测condition和执行statement，直至condition为假为止。

#### 1.4.1节练习
练习1.9: 编写程序，使用while循环将50到100的整数相加
``` c++
#include <iostream>

int main()
{
    int sum = 0;
    int val = 50;
    // 只要val的值小于10，while循环就会持续运行
    while (val <= 100)
    {
        sum += val; // 将sum+val赋给sum
        ++val;      // 将val加1
    }
    std::cout << "Sum of 50 to 100 inclusive is " << sum << std::endl;
    return 0;   
}
```
练习1.10: 除了++运算符将运算对象的值增加1之外，还有一个递减运算符（--）实现将值减少1。编写程序，使用递减运算符在循环中按递减顺序打印出10到0之间的整数。

``` c++
#include <iostream>

int main()
{
    int sum = 0;
    int val = 10;
    while (val > 0)
    {
        std::cout << val-- << std::endl;
    }
    
    return 0;   
}
```

练习1.11: 编写程序，提示用户输入两个整数，打印出这两个整数所指定的范围内的所有整数。

``` c++
#include <iostream>

int main()
{
    int begin;
    int end;
    std::cout << "Enter two numbers from begin to end: " << std::endl;
    std::cin >> begin >> end;
    while (begin <= end)
    {
        std::cout << begin++ << std::endl;
    }
    return 0;
}
```
![](images/2023-01-08-21-20-12.png)

### for语句
``` c++
// prog5 - 使用for语句重写从1加到10的程序
#include <iostream>

int main()
{
    int sum = 0;
    // 从1加到10
    for (int val = 1; val <= 10; val++)
    {
        sum += val; // 等价于sum = sum + val
    }
    std::cout << "Sum of 1 to 10 inclusive is " << sum << std::endl;
    return 0;
}
```
每个for语句都包含两部分：循环头和循环体。循环头控制循环体的执行次数，它由三部分组成：一个初始化语句（init-statement）、一个循环条件（condition）以及一个表达式（expression）。

简要重述一下for循环的总体执行流程：

1. 创建变量val，将其初始化为1
2. 检测val是否小于等于10。若检测成功，执行for循环体。若失败，退出循环，继续执行for循环体之后的第一条语句
3. 将val的值增加1
4. 重复第2步中的条件检测，只要条件为真就继续执行剩余步骤

#### 1.4.2节练习

练习1.12: 下面的for循环完成了什么功能?sum的终值是多少？
``` c++
int sum = 0;
for(int i = -100; i <= 100; ++i)
{
    sum += i;
}
```
for循环实现了求从-100到100之间所有整数相加的和，sum的终值是0

练习1.13: 使用for循环重做1.4.1节中的所有练习

``` c++ 
#include <iostream>

int main()
{
    int begin;
    int end;
    std::cout << "Enter two numbers from begin to end: " << std::endl;
    std::cin >> begin >> end;
    for(begin ; begin <= end; begin++)
    {
        std::cout << begin << std::endl;
    }
    return 0;
}
```

练习1.14: 对比for循环和while循环，两种形式的优缺点各是什么？

在循环次数已知的情况下，for循环的形式显然更为简洁。

而循环次数无法预知时，用while循环实现更适合。用特定条件控制循环是否执行，循环体中执行的语句可能导致循环判定条件发生变化

练习1.15: 编写程序，包含“再探编译”中讨论的常见错误，熟悉编译器生成的错误信息。

对于复杂程序中的错误，编译器给出的错误信息很可能无法对应到真正的错误位置并给出准确的错误原因。这是很正常的，因为某些时候我们人类都无法准确判断程序员到底犯了什么错误，在当前人工智能技术发展水平下，要求编译器有超越人类的智能是不现实的。

而且，不同的编译器对同一个程序给出的错误信息有可能是有很大差别的。一方面是因为如前所述，很多时候并不存在“唯一正确”的错误原因，编译器（甚至我们人类也是）只能给出它认为最有可能的错误原因；另一方面，不同编译器对同样的错误原因也可能有自己不同的解释方式。

因此，使用几种不同的编译器，编译一些错误的程序，观察编译器给出的错误信息。对今后在大型软件中查找、修改编译错误是很有帮助的。

### 读取数量不定的输入数据

``` c++
#include <iostream>

int main()
{
    int sum = 0;
    int value = 0;
    // 读取数据直到遇到文件尾，计算所有读入的值的和
    while (std::cin >> value)
    {
        sum += value; // 等价于sum = sum + value
    }
    std::cout << "Sum is: " << sum << std::endl;
    return 0;
}
```
![](images/2023-01-08-21-46-17.png)

当使用一个istream对象作为条件时，其效果是检测流的状态。如果流是有效的，即流未遇到错误，那么检测成功。当遇到文件结束符（end-of-file），或遇到一个无效输入时（例如读入的值不是一个整数），
istream对象的状态会变为无效。处于无效状态的istream对象会使条件变为假。

因此，while循环会一直执行直至遇到文件结束符（或输入错误）。

**从键盘输入文件结束符**
> 在Windows系统中，输入文件结束符的方法是敲Ctrl+Z（按住Ctrl键的同时按Z键），然后按Enter或Return键。
> 在Mac系统中，文件结束符输入是用control+D。

### 编译器可以检测常见错误

- **语法错误（syntax error）:** 程序员犯了C++语言语法上的错误。
``` c++
// 错误：main的参数列表漏掉了
int main( {
    // 错误:endl后使用了冒号而非分号
    std::cout << "Read each file." << std::endl:
    // 错误:字符串字面常量的两侧漏掉了引号
    std::cout << Update master. << std::endl;
    // 错误:漏掉了第二个输出运算符
    std::cout << "Write new master." std::endl;
    // 错误:return语句漏掉了分号
    return 0;
}
```

- **类型错误（type error）:** C++中每个数据项都有其类型。例如，10的类型是int。单词"hello"，包括两侧的双引号标记，则是一个字符串字面值常量。一个类型错误的例子是，向一个期望参数为int的函数传递了一个字符串字面值常量

- **声明错误（declaration error）:** C++程序中的每个名字都要先声明后使用。名字声明失败通常会导致一条错误信息。两种常见的声明错误是：对来自标准库的名字忘记使用std：：、标识符名字拼写错误

``` c++
#include <iostream>
int main()
{
    int v1 = 0, v2 = 0;
    std::cin >> v >> v2; // 错误:使用了"v"而非"v1"
    // 错误: cout未定义，应该是std::cout
    cout << v1 + v2 << std::endl;
    return 0;
}
```

#### 1.4.3节练习
练习1.16: 编写程序，从cin读取一组数，输出其和

见读取数量不定的输入数据的案例

### if语句
``` c++
// prog7.cpp - 统计在输入中每个值连续出现了多少次
#include <iostream>

int main()
{
    // currVal是我们正在统计的数，我们将读入的新值存入val
    int currVal = 0, val = 0;
    // 读取第一个数，并确保确实有数据可以处理
    if (std::cin >> currVal)
    {
        int cnt = 1; // 保存我们正在处理的当前值的个数
        while (std::cin >> val) // 读取剩余的数
        {
            if (val == currVal) // 如果值相同
            {
                ++cnt;          // 将cnt的值加1
            }
            else
            {
                std::cout << currVal << " occurs " 
                          << cnt << " times " << std::endl;
                currVal = val;  // 记住新值
                cnt = 1;        // 重置计数器
            }
        } // while循环在这里结束
        // 记住打印文件中最好一个值的个数
        std::cout << currVal << " occurs " 
            << cnt << " times " << std::endl;
    } // 最外层的if语句在这里结束
    return 0;
}
```

![](images/2023-01-08-22-13-58.png)

与while语句类似，if也对一个条件进行求值。第一条if语句的条件是读取一个数值存入currVal中。如果读取成功，则条件为真，我们继续执行条件之后的语句块。该语句块以左花括号开始，以return语句之前的右花括号结束。

#### 1.4.4节练习
练习1.17: 如果输入的所有值都是相等的，本节的程序会输出什么？如果没有重复值，输出又会是怎样的？

如果输入的所有值都相等，则while循环中的else分支永远不会执行，直到输入结束，while循环退出，循环后的输出语句打印这唯一的一个值和它出现的次数。

练习1.18: 编译并运行本节的程序，给它输入全都相等的值。再次运行程序，输入没有重复的值

![](images/2023-01-08-22-19-04.png)

练习1.19: 修改练习1.10所编写的程序（打印一个范围内的数），使其能够处理用户输入的第一个数比第二个数小的情况

``` c++
#include <iostream>

int main()
{
    int begin;
    int end;
    std::cout << "Enter two numbers from begin to end: " << std::endl;
    std::cin >> begin >> end;
    if(begin > end)
    {
        int temp = begin;
        begin = end;
        end = temp;
    }
    while (begin <= end)
    {
        std::cout << begin++ << std::endl;
    }
    return 0;
}
```

### 关键概念:c++程序的缩进和格式

C++程序很大程度上是格式自由的，也就是说，我们在哪里放置花括号、缩进、注释以及换行符通常不会影响程序的语义。例如，花括号表示main函数体的开始，它可以放在main的同一行中；也可以像我们所做的那样，放在下一行的起始位置；还可以放在我们喜欢的其他任何位置。唯一的要求是左花括号必须是main的形参列表后第一个非空、非注释的字符。

虽然很大程度上可以按照自己的意愿自由地设定程序的格式，但我们所做的选择会影响程序的可读性。例如，我们可以将整个main函数写在很长的单行内，虽然这样是合乎语法的，但会非常难读。

关于C/C++的正确格式的辩论是无休止的。我们的信条是，不存在唯一正确的风格，但保持一致性是非常重要的。例如，大多数程序员都对程序的组成部分设置恰当的缩进，就像我们在之前的例子中对main函数中的语句和循环体所做的那样。对于作为函数界定符的花括号，我们习惯将其放在单独一行中。我们还习惯对复合IO表达式设置缩进，以使输入输出运算符排列整齐。其他一些缩进约定也都会令越来越复杂的程序更加清晰易读。

我们要牢记一件重要的事情：其他可能的程序格式总是存在的。当你要选择一种格式风格时，思考一下它会对程序的可读性和易理解性有什么影响，而一旦选择了一种风格，就要坚持使用。

## 1.5 类简介
在C++中，我们通过定义一个类（class）来定义自己的数据结构。一个类定义了一个类型，以及与其关联的一组操作。

为了使用类，我们需要了解三件事情：

- 类名是什么？
- 它是在哪里定义的？
- 它支持什么操作？

对于书店程序来说，我们假定类名为Sales_item，头文件Sales_item.h中已经定义了这个类。

为了使用标准库设施，我们必须包含相关的头文件。类似的，我们也需要使用头文件来访问为自己的应用程序所定义的类。习惯上，头文件根据其中定义的类的名字来命名。通常使用.h作为头文件的后缀，但也有一些程序员习惯.H、.hpp或.hxx。

### Sales_item类

Sales_item类的作用是表示一本书的**总销售额、售出册数和平均售价**。我们现在不关心这些数据如何存储、如何计算。为了使用一个类，我们不必关心它是如何实现的，只需知道类对象可以执行什么操作。

每个类实际上都定义了一个新的类型，其类型名就是类名。因此，我们的Sales_item类定义了一个名为Sales_item的类型。与内置类型一样，我们可以定义类类型的变量。

``` c++
Sales_item item;
```

除了可以定义Sales_item类型的变量之外，我们还可以：
1. 调用一个名为isbn的函数从一个Sales_item对象中提取ISBN书号
2. 用输入运算符（>>）和输出运算符（<<）读、写Sales_item类型的对象
3. 用赋值运算符（=）将一个Sales_item对象的值赋予另一个Sales_item对象
4. 用加法运算符（+）将两个Sales_item对象相加。两个对象必须表示同一本书（相同的ISBN）
5. 使用复合赋值运算符（+=）将一个Sales_item对象加到另一个对象上

#### 关键概念：类定义了行为
Sales_item类定义了创建一个Sales_item对象时会发生什么事情，以及对Sales_item对象进行赋值、加法或输入输出运算时会发生什么事情。

#### 读写Sales_item

``` c++
#include <iostream>
#include "Sales_item.h"
int main()
{
    Sales_item book;
    // 读入ISBN号，售出的册数以及销售价格
    std::cin >> book;
    // 写入ISBN、售出的册数、总销售额和平均价格
    std::cout << book << std::endl;
    return 0;
}
```

包含来自标准库的头文件时，也应该用尖括号（<>）包围头文件名。对于不属于标准库的头文件，则用双引号（" "）包围。

#### Sales_item对象的加法
``` c++
#include <iostream>
#include "Sales_item.h"
int main()
{
    Sales_item item1, item2;
    std::cin >> item1 >> item2;   // 读取一对交易记录
    std::cout << item1 + item2 << std::endl; // 打印它们的和
    return 0;
}
```
从标准输入读取数据，存入两个对象之中。输出表达式完成加法运算并打印结果。

对于int，我们计算传统意义上的和——两个数值的算术加法结果。对于Sales_item对象，我们用了一个全新的“和”的概念——两个Sales_item对象的成员对应相加的结果。

#### 使用文件重定向
测试程序时，反复从键盘敲入这些销售记录作为程序的输入，是非常乏味的。大多数操作系统支持文件重定向，这种机制允许我们将标准输入和标准输出与命名文件关联起来：

``` c++
$ additems <infile> outfile
```
假定$是操作系统提示符，我们的加法程序已经编译为名为addItems.exe的可执行文件（在UNIX中是addItems），则上述命令会从一个名为infile的文件读取销售记录，并将输出结果写入到一个名为outfile的文件中，两个文件都位于当前目录中。

#### 1.5.1节练习
练习1.20: 在网站http://www.informit.com/title/0321714113上，第1章的代码目录中包含了头文件Sales_item.h。将它拷贝到你自己的工作目录中。用它编写一个程序，读取一组书籍销售记录，将每条记录打印到标准输出上。

``` c++
#include <iostream>
#include "Sales_item.h"

int main()
{
    Sales_item book;
    std::cout << "请输入销售记录: " << std::endl;
    while(std::cin >> book)
    {
        std::cout << "ISBN、售出本数、总销售额和平均售价为: " << book <<std::endl;
    }
    return 0;
}
```
![](images/2023-01-08-23-28-36.png)

练习1.21：编写程序，读取两个ISBN相同的Sales_item对象，输出它们的和。
``` c++
#include <iostream>
#include "Sales_item.h"

int main()
{
    Sales_item book1, book2;
    std::cout << "请输入销售记录: " << std::endl;
    std::cin >> book1 >> book2;
    std::cout << "ISBN、售出本数、销售额和平均售价为: " << book1 + book2 <<std::endl;
    return 0;
}
```
![](images/2023-01-08-23-33-58.png)

练习1.22：编写程序，读取多个具有相同ISBN的销售记录，输出所有记录的和。

``` c++
#include <iostream>
#include "Sales_item.h"

int main()
{
    Sales_item total, books;
    std::cout << "请输入销售记录: " << std::endl;
    std::cin >> total;
    while(std::cin >> books)
    {
        if(compareIsbn(total, books))
        {
            total += books;
        }
        else
        {
            std::cout << "ISBN不同" << std::endl;
            return -1;
        }
    }
    std::cout << "ISBN、售出本数、销售额和平均售价为: " << total <<std::endl;
    return 0;
}
```

### 初识成员函数

将两个Sales_item对象相加的程序首先应该检查两个对象是否具有相同的ISBN。

``` c++
#include <iostream>
#include "Sales_item.h"
int main()
{
    Sales_item item1, item2;
    std::cin >> item1 >> item2;
    // 首先检查item1和item2是否表示相同的书
    if(item1.isbn() == item2.isbn())
    {
        std::cout << item1 + item2 << std::endl;
        return 0; // 表示成功
    }
    else
    {
        std::cerr << "Data must refer to same ISBN" << std::endl;
        return -1; // 表示失败
    }
}
```
如果条件成立，如上一版本一样，程序打印计算结果，并返回0，表明成功。如果条件失败，我们执行跟在else之后的语句块，打印一条错误信息，并返回一个错误标识。
#### 什么是成员函数
``` c++
item1.isbn() == item2.isbn()
```
调用名为isbn的成员函数（member function）。成员函数是定义为类的一部分的函数，有时也被称为方法（method）。

使用点运算符（.）来表达我们需要“名为item1的对象的isbn成员”。点运算符只能用于类类型的对象。其左侧运算对象必须是一个类类型的对象，右侧运算对象必须是该类型的一个成员名，运算结果为右侧运算对象指定的成员。

当用点运算符访问一个成员函数时，通常我们是想（效果也确实是）调用该函数。我们使用调用运算符（（））来调用一个函数。调用运算符是一对圆括号，里面放置实参（argument）列表（可能为空）。

#### 1.5.2节练习
练习1.23：编写程序，读取多条销售记录，并统计每个ISBN（每本书）有几条销售记录。
``` c++
#include <iostream>
#include "Sales_item.h"

int main()
{
    Sales_item book1, book2;
    int num = 1;
    std::cout << "请输入若干销售记录: " << std::endl;
    if (std::cin >> book1)
    {
        while (std::cin >> book2)
        {
            if (compareIsbn(book1, book2)) // ISBN相同
            {
                num++;
            }
            else // ISBN不同
            {
                std::cout << book1.isbn() << "共有" << num << "条销售记录" << std::endl;
            }
            
        }
    }
    else
    {
        std::cout << "没有数据" << std::endl;
        return -1;
    }
    return 0;
}
```
练习1.24：输入表示多个ISBN的多条销售记录来测试上一个程序，每个ISBN的记录应该聚在一起。

待后续测试

## 1.6 书店程序

我们需要从一个文件中读取销售记录，生成每本书的销售报告，显示售出册数、总销售额和平均售价。我们假定每个ISBN书号的所有销售记录在文件中是聚在一起保存的。

我们的程序会将每个ISBN的所有数据合并起来，存入名为total的变量中。我们使用另一个名为trans的变量保存读取的每条销售记录。如果trans和total指向相同的ISBN，我们会更新total的值。否则，我们会打印total的值，并将其重置为刚刚读取的数据（trans）：

``` c++
#include <iostream>
#include "Sales_item.h"

int main()
{
    Sales_item total; // 保存和的变量
    // 读入第一条交易记录,并确保有数据可以处理
    if (std::cin >> total)
    {
        Sales_item books; // 保存下一条交易记录的变量
        // 读入并处理剩余交易记录
        while (std::cin >> books)
        {
            // 如果仍在处理相同的书
            if (total.isbn() == books.isbn())
            {
                total += books;
            }
            else
            {
                // 打印前一本书的结果
                std::cout << total << std::endl;
                total = books; // total现在表示下一本书的销售额
            }
        }
    }
    else
    {
        // 没有输入，警告读者
        std::cerr << "No data?" << std::endl;
        return -1;
    }
    return 0;
}
```
#### 1.6节练习
练习1.25：借助网站上的Sales_item.h头文件，编译并运行本节给出的书店程序。
